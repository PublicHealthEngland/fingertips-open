@using Fpm.MainUI.Helpers
@using Fpm.ProfileData

@model Fpm.MainUI.ViewModels.Indicator.IndicatorViewModel

@{
    var pleaseSelectOption = PleaseSelectOption.Required;
    var dropdownStyle = "dropdown-not-selected";
    var hideElementStyle = String.Empty;
    var profiles = (IEnumerable<SelectListItem>)ViewBag.Profiles;

    if (Model.IsEditAction)
    {
        pleaseSelectOption = PleaseSelectOption.NotRequired;
        dropdownStyle = "dropdown-selected";
        hideElementStyle = "hidden";
    }

    if (!Model.IsEditAction)
    {
        profiles = profiles.Where(x => x.Value != "indicators-for-review").ToList();
    }
}

<div class="@hideElementStyle">
    <label class="associated-detail-label">
        Profile
    </label>
    @Html.DropDownListFor(x => x.UrlKey, profiles, "Please select...",
        new { @class = "indicator-dropdown dropdown-not-selected", onchange = "triggerProfileChangeEvent(this)" })
</div>

@* Domain hidden as user no longer needs to select this now indicators go to IMRG *@
<div class="@hideElementStyle" style="display: none;">
    <label class="associated-detail-label">
        Domain
    </label>
    @Html.DropDownListFor(x => x.Grouping.GroupId, (IEnumerable<SelectListItem>)ViewBag.Domains, 
        new { @class = "indicator-dropdown dropdown-not-selected", onchange="triggerDomainChangeEvent(this)" })
</div>

<div class="separator @hideElementStyle">
</div>

<div>
    <label class="associated-detail-label">
        Area type
    </label>
    @Html.DropDownListFor(x => x.Grouping.AreaTypeId, CommonUtilities.GetListOfSupportedAreaTypes(pleaseSelectOption),
        new { @class = "indicator-dropdown " + dropdownStyle + " validate-required" })
</div>
<div>
    <label class="associated-detail-label">
        Sex
    </label>
    @Html.DropDownListFor(x => x.Grouping.SexId, CommonUtilities.GetListOfAllSexes(pleaseSelectOption),
        new { @class = "indicator-dropdown " + dropdownStyle + " validate-required" })
</div>
<div>
    <label class="associated-detail-label">
        Age range
    </label>
    @Html.DropDownListFor(x => x.Grouping.AgeId, CommonUtilities.GetListOfAllAges(pleaseSelectOption),
        new { @class = "indicator-dropdown " + dropdownStyle + " validate-required" })
</div>
<br>
<div>
    <label class="associated-detail-label">
        Comparator methods
    </label>
    @Html.DropDownListFor(x => x.Grouping.ComparatorMethodId, CommonUtilities.GetListOfComparatorMethods(pleaseSelectOption),
        new { @class = "indicator-dropdown " + dropdownStyle + " validate-required", onchange = "triggerComparatorMethodChangedEvent(this)" })
</div>
<div id="comparator-confidence">
    <label class="associated-detail-label">
        Comparator confidence
    </label>
    @Html.DropDownListFor(x => x.Grouping.ComparatorConfidence, CommonUtilities.GetListOfComparatorConfidences(),
        new { @class = "indicator-dropdown " + dropdownStyle + " validate-required" })
</div>
<div>
    <label class="associated-detail-label">
        Polarity
    </label>
    @Html.DropDownListFor(x => x.Grouping.PolarityId, CommonUtilities.GetListOfPolarityTypes(pleaseSelectOption),
        new { @class = "indicator-dropdown " + dropdownStyle + " validate-required" })
</div>
<br>
<div>
    <label class="associated-detail-label">
        Year range
    </label>
    @Html.DropDownListFor(x => x.Grouping.YearRange, CommonUtilities.GetListOfYearRanges(pleaseSelectOption),
        new { @class = "indicator-dropdown " + dropdownStyle + " validate-required", onchange = "dropdownChanged(this)", onfocus = "dropdownFocus(this)" })
</div>
<div>
    <label class="associated-detail-label">
        Time series
    </label>
    @Html.DropDownListFor(x => x.Grouping.TimeSeries, CommonUtilities.GetFrequencies(pleaseSelectOption),
        new { @class = "indicator-dropdown " + dropdownStyle + " validate-required", onchange = "triggerTimeSeriesEvent(this)" })
</div>
<div id="annual-range-selection" style="display: block;">
    <div>
        <label class="associated-detail-label">
            Start year
        </label>
        @Html.TextBoxFor(x => x.Grouping.BaselineYear,
            new { @class = "year-Range indicator-dropdown " + dropdownStyle, @Style = "Width: 100px;" })
    </div>

    <div>
        <label class="associated-detail-label">
            End year
        </label>
        @Html.TextBoxFor(x => x.Grouping.DataPointYear,
            new { @class = "year-Range indicator-dropdown " + dropdownStyle, @Style = "Width: 100px;" })
    </div>
</div>
<div id="quarterly-range-selection" style="display: none;">
    <div>
        <label class="associated-detail-label">
            Start quarter
        </label>
        @Html.DropDownListFor(x => x.Grouping.BaselineQuarter,
            new SelectList(CommonUtilities.GetQuarters(), "Text", "Value", "0"), new { @class = "indicator-dropdown", @Style = "Width: 100px;" })
    </div>
    <div>
        <label class="associated-detail-label">
            End quarter
        </label>
        @Html.DropDownListFor(x => x.Grouping.DataPointQuarter,
            new SelectList(CommonUtilities.GetQuarters(), "Text", "Value", "0"), new { @class = "indicator-dropdown", @Style = "Width: 100px;" })
    </div>
</div>
<div id="monthly-range-selection" style="display: none;">
    <div>
        <label class="associated-detail-label">
            Start month
        </label>
        @Html.DropDownListFor(x => x.Grouping.BaselineMonth,
            new SelectList(CommonUtilities.GetMonths(), "Text", "Value", "0"), new { @class = "indicator-dropdown", @Style = "Width: 100px;" })
    </div>
    <div>
        <label class="associated-detail-label">
            End month
        </label>
        @Html.DropDownListFor(x => x.Grouping.DataPointMonth,
            new SelectList(CommonUtilities.GetMonths(), "Text", "Value", "0"), new { @class = "indicator-dropdown", @Style = "Width: 100px;" })
    </div>
</div>
